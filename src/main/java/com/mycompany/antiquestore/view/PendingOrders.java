/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.antiquestore.view;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class PendingOrders extends javax.swing.JFrame {

    private Connection conn; // Declare the Connection variable

    /**
     * Creates new form Test
     */
    public PendingOrders() {
        initComponents(); // Assuming initComponents is generated by NetBeans or another IDE
        conn = openConnection();
        Update_Table();
        
// Initialize the Connection variable
    }
    

    // Method to open a database connection
    private Connection openConnection() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection connection = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/AntiqueEcommerce", "root", "password");
        
        if (connection != null && !connection.isClosed()) {
            System.out.println("Database connected successfully!");
        } else {
            System.err.println("Failed to connect to the database!");
        }

        return connection;
    } catch (ClassNotFoundException | SQLException ex) {
        Logger.getLogger(PendingOrders.class.getName()).log(Level.SEVERE, null, ex);
        return null;
    }
}

    // ... (existing code)

    public void Update_Table() {
    try {
        if (conn != null && !conn.isClosed()) {
            String sql = "SELECT p.ID, p.ItemId, i.ItemName, p.Quantity, i.Price, (p.Quantity * i.Price) AS TotalPrice " +
                         "FROM pending p " +
                         "JOIN item i ON p.ItemId = i.ID " +
                         "WHERE p.Status = 0"; // Add the condition to select rows where status is 0
            System.out.println(sql);
            System.out.println("abc");
            System.out.println(sql);
            System.out.println("abc");
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            // Assuming your table has 5 columns (adjust as needed)
            DefaultTableModel df = (DefaultTableModel) TestTable.getModel();
            df.setRowCount(0);

            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getInt("ID"));
                row.add(rs.getInt("ItemId"));
                row.add(rs.getString("ItemName"));
                row.add(rs.getInt("Quantity"));
                row.add(rs.getDouble("Price"));
                row.add(rs.getDouble("TotalPrice"));

                // Create a JButton for each row
                JButton executeButton = new JButton("Execute");

                // Add an ActionListener to the button
                executeButton.addActionListener(e -> {
                    // Handle button click
                    int selectedRow = TestTable.getSelectedRow();
                    if (selectedRow != -1) {
                        // Remove the selected row from the table
                        df.removeRow(selectedRow);
                    }
                });

                // Add the button to the last column
                row.add(executeButton);
                df.addRow(row);
            }
        } else {
            System.err.println("Database connection is closed or null!");
        }
    } catch (SQLException ex) {
        Logger.getLogger(PendingOrders.class.getName()).log(Level.SEVERE, null, ex);
    }
}

// ... (existing code)


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TestTable = new javax.swing.JTable();
        ExecuteText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 0));

        jLabel1.setText("Pending Order");

        TestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "ItemID", "Name", "Quantity", "Price", "Total"
            }
        ));
        jScrollPane1.setViewportView(TestTable);

        ExecuteText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteTextActionPerformed(evt);
            }
        });

        jButton1.setText("Execute");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ExecuteText)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ExecuteText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExecuteTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExecuteTextActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
private void updatePendingStatus(int itemId) {
    try {
        if (conn != null && !conn.isClosed()) {
            
            String updateSql = "UPDATE pending SET Status =1 WHERE Id = ?";
            PreparedStatement updatePst = conn.prepareStatement(updateSql);
            updatePst.setInt(1, itemId);

            int updatedRows = updatePst.executeUpdate();

            if (updatedRows > 0) {
                System.out.println("Status updated successfully!");
                Update_Table();  // Refresh the table after updating
            } else {
                System.err.println("No rows were updated. ItemId not found.");
            }
        } else {
            System.err.println("Database connection is closed or null!");
        }
    } catch (SQLException ex) {
        Logger.getLogger(PendingOrders.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    String input = ExecuteText.getText();
    
    try {
        int intInput = Integer.parseInt(input);
        
        
        updatePendingStatus(intInput);
    } catch (NumberFormatException e) {
        System.err.println("Invalid input. Please enter a valid integer.");
    }

    }//GEN-LAST:event_jButton1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ExecuteText;
    private javax.swing.JTable TestTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
